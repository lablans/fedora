name: build
on:
  workflow_dispatch:
  push:
  schedule:
    - cron: '0 * * * *'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: kinoite

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      UPSTREAM_IMAGE: quay.io/fedora-ostree-desktops/kinoite:42
    steps:
      - name: "Precheck: Check upstream digest"
        id: upstream_digest
        shell: bash
        run: |
          DIGEST=$(skopeo inspect --format '{{.Digest}}' docker://${UPSTREAM_IMAGE})
          echo "Newest digest for upstream image ${UPSTREAM_IMAGE}: ${DIGEST}"
          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"

      - name: "Precheck: Probe if digest was built already"
        id: cache
        uses: actions/cache@v4
        with:
          # Any small file/dir; we just need a path to bind the cache to.
          path: ${{ runner.temp }}/.digest-cache
          key: upstream-digest-${{ steps.upstream_digest.outputs.digest }}

      - name: "Precheck: Skip build on old digest"
        if: github.event_name == 'schedule' && steps.cache.outputs.cache-hit == 'true'
        run: |
          echo "No new upstream image (digest ${{ steps.upstream_digest.outputs.digest }}). Exiting."
          exit 0

      - name: "Precheck: Mark digest as seen"
        run: |
          mkdir -p "$RUNNER_TEMP/.digest-cache"
          echo "${{ steps.upstream_digest.outputs.digest }}" > "$RUNNER_TEMP/.digest-cache/last.txt"

      - name: Report to monitoring (start)
        shell: bash
        env:
          URL: ${{ secrets.MONITORING_PUSH_URL }}
        run: |
          curl "${URL}/start"

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build/Push/Sign (opa)
        uses: ./.github/actions/build-push-sign
        with:
          image_name: ${{ env.IMAGE_NAME }}
          registry_path: ${{ env.REGISTRY }}/${{ github.actor }}
          tags: "opa-${{ github.ref_name }}"
          target: "opa"
          upstream_image: ${{ env.UPSTREAM_IMAGE }}

      - name: Build/Push/Sign (julia)
        uses: ./.github/actions/build-push-sign
        with:
          image_name: ${{ env.IMAGE_NAME }}
          registry_path: ${{ env.REGISTRY }}/${{ github.actor }}
          tags: "julia-${{ github.ref_name }}"
          target: "julia"
          upstream_image: ${{ env.UPSTREAM_IMAGE }}

      - name: Report to monitoring (success)
        shell: bash
        env:
          URL: ${{ secrets.MONITORING_PUSH_URL }}
        run: |
          curl "${URL}/0"
