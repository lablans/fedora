name: Build, push, and sign container target
description: Reusable step that builds a target, pushes it, and signs the resulting digest.
inputs:
  image_name:
    description: Container image name (repository)
    required: true
  registry_path:
    description: Full registry path (e.g. ghcr.io/OWNER)
    required: true
  tags:
    description: Space-separated tags (without SHA)
    required: true
  target:
    description: Build target
    required: true
  upstream_image:
    description: Upstream image to use as a build-arg
    required: true
runs:
  using: "composite"
  steps:
    - name: Build image (${{ inputs.target }})
      id: build_image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ inputs.image_name }}
        containerfiles: |
          ./Containerfile
        tags: ${{ inputs.tags }} ${{ inputs.target }}-${{ github.sha }}
        build-args: |
          UPSTREAM_IMAGE=${{ inputs.upstream_image }}
        extra-args: |
          --target ${{ inputs.target }}

    - name: Add extra Tags
      shell: bash
      run: |
        set -x
        version=$(podman image inspect ${{ steps.build_image.outputs.image-with-tag }} \
          --format '{{ index .Config.Labels "org.opencontainers.image.version" }}')
        LONG_TAG="${{ inputs.target }}-${version}"
        SHORT_TAG=$(echo ${LONG_TAG} | sed 's:\..*::')
        echo "LONG_TAG=$LONG_TAG" >> $GITHUB_ENV
        echo "SHORT_TAG=$SHORT_TAG" >> $GITHUB_ENV

        podman tag ${{ steps.build_image.outputs.image-with-tag }} \
          ${{ inputs.image_name }}:${LONG_TAG} \
          ${{ inputs.image_name }}:${SHORT_TAG}

    - name: Push to registry (${{ inputs.target }})
      id: push_image
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build_image.outputs.image }}
        tags: |
          ${{ steps.build_image.outputs.tags }}
          ${{ env.LONG_TAG }}
          ${{ env.SHORT_TAG }}
        registry: ${{ inputs.registry_path }}

    - name: Sign image (${{ inputs.target }})
      shell: bash
      env:
        DIGEST: ${{ steps.push_image.outputs.digest }}
        COSIGN_PRIVATE_KEY: ${{ env.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ env.COSIGN_PASSWORD }}
      run: |
        cosign sign -y --key env://COSIGN_PRIVATE_KEY \
          ${{ inputs.registry_path }}/${{ inputs.image_name }}@${DIGEST}
